#!/bin/bash

set -e

CONFIG_FILE="$HOME/.config/dotpkgr/dotpkgr.toml"
BASE_DIR="${DOTFILES_DIR:-$HOME/mygithub/dotfiles}"
SCRIPTS_DIR="${BASE_DIR}/scripts/setup"

print_targets() {
    echo "[big-bang]"
    echo "  big-bang"
    echo

    declare -A VERIFIED
    current_section=""
    while IFS= read -r line; do
        if echo "$line" | grep -qE '^\[.*\]$'; then
            current_section=$(echo "$line" | tr -d '[]')
        elif echo "$line" | grep -qE '^os_verification *= *true'; then
            VERIFIED["$current_section"]=1
        fi
    done < "$CONFIG_FILE"

    for category in os tools; do
        echo "[$category]"
        awk -v base="$SCRIPTS_DIR/" -v type="$category" '
            /^\[.*\]/ {
                section = $0
                gsub(/[\[\]]/, "", section)
            }
            /script *=/ && $0 ~ type"/" {
                match($0, /"(.*)"/, arr)
                script_path = base arr[1]
                if (system("[ -f \"" script_path "\" ]") == 0) {
                    print section "|" script_path
                }
            }
        ' "$CONFIG_FILE" | sort | while IFS='|' read -r name path; do
            if [[ -n "${VERIFIED[$name]}" ]]; then
                echo "  $name (os_verification)"
            else
                echo "  $name"
            fi
        done
        echo
    done
}

usage() {
    echo "Usage: dotpkgr <subcommand> [options]"
    echo ""
    echo "Subcommands:"
    echo "  install [--distro <fedora|arch|debian>] <target>   Install a single target or run big-bang setup"
    echo "       If <target> is omitted and --distro is provided, installs OS-level package for that distro"
    echo "  list                                               Show installable targets (grouped by category)"
    echo ""
    echo "Install Targets:"
    print_targets
    echo ""
    echo "Notes:"
    echo "  - The --distro flag is required when installing OS-level targets or running big-bang"
    echo "  - Tools with 'os_verification = true' also require --distro"
    exit 1
}

DISTRO=""
COMMAND=""
SUBCOMMAND=""

# Parse subcommand
if [[ $# -eq 0 ]]; then
    usage
fi

SUBCOMMAND="$1"
shift

case "$SUBCOMMAND" in
install) ;;
list)
    print_targets
    exit 0
    ;;
--help | -h)
    usage
    ;;
*)
    echo "[dotpkgr] Unknown subcommand: $SUBCOMMAND"
    usage
    ;;
esac

# Parse args for `install`
while [[ $# -gt 0 ]]; do
    case "$1" in
    --distro)
        DISTRO="$2"
        shift 2
        ;;
    -*)
        echo "[dotpkgr] Unknown option: $1"
        usage
        ;;
    *)
        COMMAND="$1"
        shift
        ;;
    esac
done

# Validate that DISTRO is a real OS target if specified
if [[ -n "$DISTRO" ]]; then
    VALID_OS=$(awk '
        /^\[.*\]/ {
            section = $0
            gsub(/[\[\]]/, "", section)
        }
        /script *=/ && $0 ~ /^.*os\// {
            print section
        }
    ' "$CONFIG_FILE" | grep -Fx "$DISTRO" || true)

    if [[ -z "$VALID_OS" ]]; then
        echo "[dotpkgr] Invalid value for --distro: '$DISTRO'"
        echo "         Must be one of the valid OS install targets."
        exit 1
    fi
fi

# Fallback: allow `--distro fedora` alone to mean `install fedora`
if [[ -z "$COMMAND" ]]; then
    if [[ -n "$DISTRO" ]]; then
        COMMAND="$DISTRO"
    else
        echo "[dotpkgr] Missing install target."
        usage
    fi
fi

if [[ ! -f "$CONFIG_FILE" ]]; then
    echo "[dotpkgr] Config file not found: $CONFIG_FILE"
    exit 1
fi

get_script_path() {
    awk -v cmd="$1" '
        $0 ~ "\\["cmd"\\]" { in_section=1; next }
        in_section && $0 ~ /script *=/ {
            gsub(/"/, "", $3);
            print $3;
            exit
        }
    ' "$CONFIG_FILE"
}

requires_os_verification() {
    awk -v cmd="$1" '
        $0 ~ "\\["cmd"\\]" { in_section=1; next }
        in_section && $1 == "os_verification" {
            print $3;
            exit
        }
        in_section && /^\[/ { exit }
    ' "$CONFIG_FILE"
}

# Big bang setup
if [[ "$COMMAND" == "big-bang" ]]; then
    if [[ -z "$DISTRO" ]]; then
        echo "[dotpkgr] --distro is required for big-bang installation."
        exit 1
    fi

    echo "[dotpkgr] Running big-bang installation for distro: $DISTRO"

    OS_SCRIPT=$(get_script_path "$DISTRO")
    if [[ -z "$OS_SCRIPT" ]]; then
        echo "[dotpkgr] Distro script not found for '$DISTRO'"
        exit 1
    fi

    OS_SCRIPT_PATH="${SCRIPTS_DIR}/${OS_SCRIPT}"
    if [[ ! -x "$OS_SCRIPT_PATH" ]]; then
        echo "[dotpkgr] OS script is not executable: $OS_SCRIPT_PATH"
        exit 1
    fi

    echo "[dotpkgr] → Running OS script: $OS_SCRIPT_PATH"
    "$OS_SCRIPT_PATH"
    echo

    echo "[dotpkgr] → Installing tools..."
    awk -v skip="$DISTRO" '
        /^\[.*\]/ {
            gsub(/[\[\]]/, "", $0)
            current = $0
        }
        /script *=/ {
            gsub(/"/, "", $3)
            if (current != skip && $3 ~ "^tools/") {
                print $3
            }
        }
    ' "$CONFIG_FILE" | while read -r script_rel; do
        TOOL_SCRIPT_PATH="${SCRIPTS_DIR}/${script_rel}"
        if [[ ! -x "$TOOL_SCRIPT_PATH" ]]; then
            echo "[dotpkgr] Skipping non-executable script: $TOOL_SCRIPT_PATH"
            continue
        fi
        echo "[dotpkgr] → Running tool script: $TOOL_SCRIPT_PATH"
        "$TOOL_SCRIPT_PATH"
        echo
    done

    echo "[dotpkgr] ✅ big-bang complete."
    exit 0
fi

# Get path to target script
SCRIPT_REL_PATH=$(get_script_path "$COMMAND")
if [[ -z "$SCRIPT_REL_PATH" ]]; then
    echo "[dotpkgr] Command '$COMMAND' not found in $CONFIG_FILE"
    exit 1
fi

SCRIPT_PATH="${SCRIPTS_DIR}/${SCRIPT_REL_PATH}"

# Validate distro requirements
NEEDS_VERIFICATION=false
if [[ "$SCRIPT_REL_PATH" == os/* ]]; then
    NEEDS_VERIFICATION=true
else
    if [[ "$(requires_os_verification "$COMMAND")" == "true" ]]; then
        NEEDS_VERIFICATION=true
    fi
fi

if [[ "$NEEDS_VERIFICATION" == true ]]; then
    if [[ -z "$DISTRO" ]]; then
        echo "[dotpkgr] --distro is required for '$COMMAND'."
        exit 1
    fi
    if [[ "$SCRIPT_REL_PATH" == os/* && "$COMMAND" != "$DISTRO" ]]; then
        echo "[dotpkgr] Conflict: Trying to run '$COMMAND' on DISTRO='$DISTRO'."
        echo "          Only '$DISTRO' script is allowed."
        exit 1
    fi
fi

if [[ ! -x "$SCRIPT_PATH" ]]; then
    echo "[dotpkgr] Script is not executable or missing: $SCRIPT_PATH"
    exit 1
fi

echo "[dotpkgr] Running: $SCRIPT_PATH"
"$SCRIPT_PATH"
